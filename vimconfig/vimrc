" Initially swiped from the .vimrc in ls-pair

" ===== Plugins via vim-plug =====

    " Documentation on Plug:  https://github.com/junegunn/vim-plug
    call plug#begin('~/.vim/plugged')

    " Make sure you use single quotes

    Plug 'scrooloose/nerdtree'                                " NERDtree.  Yep.
    Plug 'git@github.com:rking/ag.vim.git'                    " use the Silver Searcher from within vim with :Ag
    Plug 'git@github.com:jlanzarotta/bufexplorer.git'         " Buffer Explorer, quite useful
    Plug 'git@github.com:godlygeek/tabular.git'               " Tabularize:  vertical alignment goodness
    Plug 'git@github.com:tomtom/tcomment_vim.git'             " Ctrl+dash 2x to comment (and a bunch of other stuff I never use)
    Plug 'git@github.com:flazz/vim-colorschemes.git'          " loads o' colorschemes
    Plug 'git@github.com:tpope/vim-surround.git'              " surrounding characters (ludicrously useful)
    Plug 'git@github.com:tpope/vim-repeat.git'                " repeat plugin actions (e.g., from vim-surround)
    Plug 'git@github.com:ctrlpvim/ctrlp.vim.git'              " Fast fuzzy finder
    Plug 'git@github.com:danro/rename.vim.git'                " Easy renames
    Plug 'git@github.com:tpope/vim-endwise.git'               " Automatically enter closing tokens (e.g., 'end' in Ruby)
    Plug 'git@github.com:scrooloose/syntastic.git'            " Syntax warnings
    Plug 'git@github.com:wesQ3/vim-windowswap.git'            " <Leader>ww in each of two windows to swap them
    Plug 'git@github.com:AndrewRadev/splitjoin.vim.git'       " convert between one-line to multiline constructs
    Plug 'git@github.com:vim-scripts/ZoomWin.git'             " 'C-w o' toggles between splits and a single pane
    Plug 'git@github.com:tpope/vim-fugitive.git'              " Fugitive. You know, for Git!
    Plug 'git@github.com:elixir-lang/vim-elixir.git'          " presumably something to do with Elixir syntax...
    Plug 'git@github.com:airblade/vim-gitgutter.git'          " show git status on individual lines/hunks
    Plug 'git@github.com:nathanaelkane/vim-indent-guides.git' " stripe indent levels with alternating colors

    " " TextMate-style snippets
    " disabling these until I can figure out why pressing Tab inserts '<Plug>snipMateNextOrTrigger'
    " Plug 'git@github.com:garbas/vim-snipmate.git'
    " Plug 'git@github.com:MarcWeber/vim-addon-mw-utils.git' " dependency of vim-snipmate
    " Plug 'git@github.com:tomtom/tlib_vim.git'              " dependency of vim-snipmate

    " Tool-specific plugins...

    Plug 'git@github.com:kchmck/vim-coffee-script.git'
    Plug 'git@github.com:tpope/vim-rails.git'

    " Plugins I used to have:
    " - gundo
    " - snipmate
    " - vim-bundler
    " - vim-colors-solarized
    " - vim-cucumber
    " - vim-fugitive
    " - vim-markdown
    " - vim-rake
    " - vim-textobj-rubyblock
    " - vim-textobj-user

    " Check here for some more to try out:
    " https://need.computer/2016/01/21/22-vim-plugins-every-ruby-developer-should-use.html

    " Add plugins to &runtimepath
    call plug#end()

" ===== General =====

" No reason to limit ourselves to vi compatibility
    set nocompatible

" Enable extended % matching
runtime macros/matchit.vim

" When vimrc is edited, reload it
autocmd! bufwritepost .vimrc source ~/.vimrc

" Change <leader>, because commas are easier to reach for than backslashes
let mapleader = ","
let g:mapleader = ","

" " Basic setup for pathogen
" call pathogen#infect()
" syntax on
" filetype plugin indent on

" Remember command line entries
set history=300

" Reload files when they are changed by another process.
set autoread
" augroup checktime
"     au!
"     if !has("gui_running")
"         "silent! necessary otherwise throws errors when using command
"         "line window.
"         autocmd BufEnter        * silent! checktime
"         autocmd CursorHold      * silent! checktime
"         autocmd CursorHoldI     * silent! checktime
"         "these two _may_ slow things down. Remove if they do.
"         autocmd CursorMoved     * silent! checktime
"         autocmd CursorMovedI    * silent! checktime
"     endif
" augroup END
" 
" " When editing a file, always jump to the last known cursor position.
" " Don't do it when the position is invalid or when inside an event handler
" " (happens when dropping a file on gvim).
" " Also don't do it when the mark is in the first line, that is the default
" " position when opening a file.
" autocmd BufReadPost *
"   \ if line("'\"") > 1 && line("'\"") <= line("$") |
"   \   exe "normal! g`\"" |
"   \ endif
" 
" " Maintain some setup between sessions
" set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize



" ===== VIM UI =====

set scrolloff=7                    " n lines of context above and below the cursor
set sidescrolloff=10
set wildmenu                       " Turn on WiLd menu
set ruler                          " Always show current position
set cmdheight=1                    " The commandbar height
set hid                            " Change buffer without saving
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
set ignorecase                     " Ignore case when searching
set smartcase                      " Ignore case when searching lowercase
set hlsearch                       " highlight search
set incsearch                      " incremental search, search as you type
map <silent> <leader><cr> :noh<cr> " clear search highlighting
set magic                          " make regular expressions behave sanely (i.e.           " . " matches any character vs. " \. " )
set showmatch                      " Show matching bracets when text indicator is over them
set noerrorbells                   " No sound on errors
set novisualbell
set t_vb=
set nu                             " print line numbers in gutter
set numberwidth=4

" show trailing whitespace
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.

" open a new line without entering insert mode
map <Enter> o<ESC>

" sometimes the Escape key is too far away
imap jj <Esc>

set showcmd " Defaults to on for vim anyway, but just in case
set nowrap
set linebreak " Wrap at word

" Make dealing with split windows a little easier
set equalalways " Vertical and horizontal splits default to equal sizes when created
set splitbelow splitright
:noremap <leader>v :vsplit<cr>
:noremap <leader>h :split<cr>


" ===== Colors =====
set t_Co=256
set background=dark

" ===== Encoding and locale =====
set encoding=utf8

try
  lang en_US
catch
endtry

set ffs=unix,dos,mac "Default file types

" ===== Files and backups =====

" Turn backup off, since most stuff is in git anyway...
set nobackup
set nowb
set noswapfile

" ===== Text, tab and indent related =====

set expandtab
set shiftwidth=2
set tabstop=2
set softtabstop=2
set smarttab
set tw=72
set ai "Auto indent
set si "Smart indet

" ===== Moving around, tabs and buffers =====

"Quickly open a scratch buffer
map <leader>q :enew<cr>

" Lazy way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" " Close the current buffer
" map <leader>bd :Bclose<cr>
" 
" Show buffer list (also mapped to "<leader>be", but this is easier to type
map <leader>bb :BufExplorer<cr>

" command! Bclose call <SID>BufcloseCloseIt()
" function! <SID>BufcloseCloseIt()
"   let l:currentBufNum = bufnr("%")
"   let l:alternateBufNum = bufnr("#")
" 
"   if buflisted(l:alternateBufNum)
"     buffer #
"   else
"     bnext
"   endif
" 
"   if bufnr("%") == l:currentBufNum
"     new
"   endif
" 
"   if buflisted(l:currentBufNum)
"     execute("bdelete! ".l:currentBufNum)
"   endif
" endfunction
" 
" " Specify the behavior when switching between buffers 
" try
"   set switchbuf=usetab
"   set stal=1
" catch
" endtry
" 
" 
" ===== Statusline =====

" Never hide the statusline
set laststatus=2

" Format the statusline
set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c


function! CurDir()
  let curdir = substitute(getcwd(), '/Users/amir/', "~/", "g")
  return curdir
endfunction


" ===== Text files =====

autocmd FileType text setlocal textwidth=72
autocmd FileType text setlocal nosi
autocmd FileType text :set spl=en_us spell
autocmd FileType gitcommit setlocal textwidth=72
autocmd FileType gitcommit setlocal nosi
autocmd FileType gitcommit :set spl=en_us spell

" ===== HTML files =====
autocmd FileType html :set spl=en_us spell

" ===== Ruby files =====
compiler ruby         " Enable compiler support for ruby
autocmd FileType ruby :set foldmethod=syntax
autocmd FileType ruby :set foldlevel=1


" ===== Sam's Customizations =====

" If I want spell checking, vim, I'll ask you for it.
autocmd FileType text :set nospell

" If I want help, vim, I'll :h you for it.
nmap <F1> :echo<CR>
imap <F1> <Esc>

" " Troll pair partners by disabling arrow keys in insert mode :D
" " imap <up> <nop>
" " imap <down> <nop>
" " imap <left> <nop>
" " imap <right> <nop>
" imap <up> <up>
" imap <down> <down>
" imap <left> <left>
" imap <right> <right>
" 
" The Silver Searcher
if executable('ag')

  " Pretend we're still using Ack for muscle memory / pair partners
  " :command Ack Ag

  " from https://github.com/ggreer/the_silver_searcher
  let g:ackprg = 'ag --vimgrep'

  " The rest of this section swiped from
  " https://robots.thoughtbot.com/faster-grepping-in-vim

  " Use ag instead of grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

" " bind \ (backward slash) to grep shortcut
" command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
" nnoremap \ :Ag<SPACE>
endif

" Split using similar keys to the ones I have in tmux
:noremap <leader>\| :vsp<cr> " Quick access to vertical splits
:noremap <leader>- :split<cr> " Quick access to horizontal splits

" disable mouse (it interferes with my terminal selections)
set mouse=

" line break without breaking words
set wrap
set linebreak
set nolist  " list disables linebreak

" Colors
set t_Co=256 " 256 colors
set background=dark
colorscheme herald

  " I like the 'herald' color scheme, but the color it uses
  " for comments is too dim.  Brighten it up a little...
  if has("gui_running")
    hi Comment        guibg=#1F1F1F guifg=#909090 gui=none
  elseif &t_Co == 256
    hi Comment        ctermbg=234   ctermfg=248   cterm=none
  elseif &t_Co == 16
    hi Comment        ctermbg=8     ctermfg=7     cterm=none
  elseif &t_Co == 8
    hi Comment        ctermbg=8     ctermfg=7     cterm=none
  endif

  " Also, make the background a shade darker (terminal only)
  if &t_Co == 256
    hi Normal                  ctermbg=233

    hi Comment                 ctermbg=233
    hi Constant                ctermbg=233
    hi Delimiter               ctermbg=233
    hi DiffDelete              ctermbg=233
    hi Error                   ctermbg=233
    hi Exception               ctermbg=233
    hi Folded                  ctermbg=233
    hi FoldColumn              ctermbg=233
    hi Function                ctermbg=233
    hi Identifier              ctermbg=233
    hi Ignore                  ctermbg=233
    hi NonText                 ctermbg=233
    hi Operator                ctermbg=233
    hi PreProc                 ctermbg=233
    hi Special                 ctermbg=233
    hi SpecialKey              ctermbg=233
    hi Statement               ctermbg=233
    hi String                  ctermbg=233
    hi Todo                    ctermbg=233
    hi Type                    ctermbg=233
    hi Underlined              ctermbg=233
    hi VertSplit               ctermbg=233
    hi htmlBold                ctermbg=233
    hi htmlBoldItalic          ctermbg=233
    hi htmlBoldUnderline       ctermbg=233
    hi htmlBoldUnderlineItalic ctermbg=233
    hi htmlItalic              ctermbg=233
    hi htmlUnderline           ctermbg=233
    hi htmlUnderlineItalic     ctermbg=233
  endif


" Quickly toggle wordwrap
:noremap <leader>W :set wrap<cr>
:noremap <leader>w :set nowrap<cr>
set nowrap


" Edit the current directory
nmap <Leader>e. :e %:h<CR>

" Fonts for MacVIM
if has("gui_running")
  set guioptions=-t
  set guifont=Monaco:h16
endif

" Reflow paragraph
nmap <Leader>r gqip
vmap <Leader>r gq

" SplitJoin
nmap <Leader>sl :SplitjoinSplit<CR>
nmap <Leader>jl :SplitjoinJoin<CR>

" Indent Guides
let g:indent_guides_auto_colors = 0
if has("gui_running") || &t_Co == 256
  hi IndentGuidesOdd  ctermbg=234
  hi IndentGuidesEven ctermbg=235
endif
autocmd FileType text :IndentGuidesEnable

" Tabularize
nmap <Leader>a# :Tabularize/#<CR>
vmap <Leader>a# :Tabularize/#<CR>
nmap <Leader>ah :Tabularize/=><CR>
vmap <Leader>ah :Tabularize/=><CR>
" lolvim: the sequence "\@!" apparently means "zero of the thing I just said"
nmap <Leader>a= :Tabularize/=>\@!<CR>
vmap <Leader>a= :Tabularize/=>\@!<CR>

nmap <Leader>a; :Tabularize/;<CR>
vmap <Leader>a; :Tabularize/;<CR>
nmap <Leader>a{ :Tabularize/{<CR>:Tabularize/}<CR>
vmap <Leader>a{ :Tabularize/{<CR>:Tabularize/}<CR>

" NOTES:
" * \zs is basically a zero-width lookbehind assertion;
"   it eats spaces before the comma/colon/whatever.
"   See: http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
" * l0c1 is a format specifier that says
"   "left, then zero spaces, then [delimiter], then 1 space"
"   See: https://raw.github.com/godlygeek/tabular/master/doc/Tabular.txt
nmap <Leader>a: :Tabularize/:\zs /l0c0<CR>
vmap <Leader>a: :Tabularize/:\zs /l0c0<CR>
nmap <Leader>a, :Tabularize/,\zs/l0c1<CR>
vmap <Leader>a, :Tabularize/,\zs/l0c1<CR>
nmap <Leader>ato :Tabularize/).to\(_not\)\?<CR>:Tabularize/expect(<CR>
vmap <Leader>ato :Tabularize/).to\(_not\)\?<CR>:Tabularize/expect(<CR>
nmap <Leader>a( :Tabularize/(\zs/l0c1<CR>:Tabularize/)/l1c0<CR>
vmap <Leader>a( :Tabularize/(\zs/l0c1<CR>:Tabularize/)/l1c0<CR>
nmap <Leader>a[ :Tabularize/[\zs/l0c1<CR>:Tabularize/]/l1c0<CR>
vmap <Leader>a[ :Tabularize/[\zs/l0c1<CR>:Tabularize/]/l1c0<CR>

" Trailing whitespace sucks.
"" Show it:
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

"" Nuke it with F6:
:nnoremap <silent> <F6> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>


