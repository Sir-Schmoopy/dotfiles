" If I want spell checking, vim, I'll ask you for it.
autocmd FileType text :set nospell

" Troll pair partners by disabling arrow keys in insert mode :D
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" The Silver Searcher
if executable('ag')

  " from https://github.com/ggreer/the_silver_searcher
  let g:ackprg = 'ag --vimgrep'

  " The rest of this section swiped from
  " https://robots.thoughtbot.com/faster-grepping-in-vim

" " Use ag instead of grep
" set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

" " bind \ (backward slash) to grep shortcut
" command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
" nnoremap \ :Ag<SPACE>
endif

" If I want help, vim, I'll :h you for it.
nmap <F1> :echo<CR>
imap <F1> <Esc>

" Split using similar keys to the ones I have in tmux
:noremap <leader>\| :vsp<cr> " Quick access to vertical splits
:noremap <leader>- :split<cr> " Quick access to horizontal splits

" disable mouse (it interferes with my terminal selections)
set mouse=

" line break without breaking words
set wrap
set linebreak
set nolist  " list disables linebreak

" Colors
set t_Co=256 " 256 colors
set background=dark
colorscheme herald
source ~/dotfiles/vimconfig/herald-colorscheme-overrides

" Edit the current directory
nmap <Leader>e. :e %:h<CR>

" Fonts for MacVIM
if has("gui_running")
  set guioptions=-t
  set guifont=Monaco:h16
endif

" Reflow paragraph
nmap <Leader>r gqip
vmap <Leader>r gq

" Tabularize
nmap <Leader>a# :Tabularize/#<CR>
vmap <Leader>a# :Tabularize/#<CR>
nmap <Leader>ah :Tabularize/=><CR>
vmap <Leader>ah :Tabularize/=><CR>
" lolvim: the sequence "\@!" apparently means "zero of the thing I just said"
nmap <Leader>a= :Tabularize/=>\@!<CR>
vmap <Leader>a= :Tabularize/=>\@!<CR>

nmap <Leader>a; :Tabularize/;<CR>
vmap <Leader>a; :Tabularize/;<CR>
nmap <Leader>a{ :Tabularize/{<CR>:Tabularize/}<CR>
vmap <Leader>a{ :Tabularize/{<CR>:Tabularize/}<CR>

" NOTES:
" * \zs is basically a zero-width lookbehind assertion;
"   it eats spaces before the comma/colon/whatever.
"   See: http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
" * l0c1 is a format specifier that says
"   "left, then zero spaces, then [delimiter], then 1 space"
"   See: https://raw.github.com/godlygeek/tabular/master/doc/Tabular.txt
nmap <Leader>a: :Tabularize/:\zs /l0c0<CR>
vmap <Leader>a: :Tabularize/:\zs /l0c0<CR>
nmap <Leader>a, :Tabularize/,\zs/l0c1<CR>
vmap <Leader>a, :Tabularize/,\zs/l0c1<CR>
nmap <Leader>a( :Tabularize/(\zs/l0c1<CR>:Tabularize/)/l1c0<CR>
vmap <Leader>a( :Tabularize/(\zs/l0c1<CR>:Tabularize/)/l1c0<CR>
nmap <Leader>a[ :Tabularize/[\zs/l0c1<CR>:Tabularize/]/l1c0<CR>
vmap <Leader>a[ :Tabularize/[\zs/l0c1<CR>:Tabularize/]/l1c0<CR>

" Trailing whitespace sucks.
"" Show it:
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

"" Nuke it with F6:
:nnoremap <silent> <F6> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
